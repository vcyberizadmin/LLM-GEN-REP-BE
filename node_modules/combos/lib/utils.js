"use strict";

exports.__esModule = true;
exports.sym = sym;
exports.buildBaseTuple = buildBaseTuple;
exports.addToTuple = addToTuple;
exports.generateValueCombinations = generateValueCombinations;
exports.assertHaveValuesForEveryKey = assertHaveValuesForEveryKey;
function sym(id) {
  return "@@combos/" + id;
}

function buildBaseTuple(headItem, restItem) {
  return [headItem, restItem];
}

function addToTuple(headItem, restItem) {
  return [headItem].concat(restItem);
}

function generateValueCombinations(_ref) {
  var head = _ref[0];

  var tail = _ref.slice(1);

  var initial = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  if (tail.length === 0) {
    return initial ? head.map(function (item) {
      return [item];
    }) : head;
  }

  var result = [];
  var rest = generateValueCombinations(tail);

  var buildTuple = tail.length === 1 ? buildBaseTuple : addToTuple;

  for (var i = 0, l = rest.length; i < l; i++) {
    for (var j = 0, k = head.length; j < k; j++) {
      result.push(buildTuple(head[j], rest[i]));
    }
  }

  return result;
}

function assertHaveValuesForEveryKey(keys, possibleValues) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var values = possibleValues[i];

    if (!values || !Array.isArray(values) || values.length <= 0) {
      throw new Error("Please provide an array of at least one value for key '" + keys[i] + "'");
    }
  }
}